package dao.Impl;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;

import dao.PhanCongDao;
import entity.CongCuaCongNhan;
import entity.CongDoan;
import entity.CongNhan;
import entity.PhanCong;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.EntityTransaction;
import jakarta.persistence.Persistence;
import jakarta.persistence.TypedQuery;

public class PhanConglmpl implements PhanCongDao{
	private static Object session;
	private EntityManagerFactory emf;
	private Object emd;

	public PhanConglmpl() {
		// Khởi tạo EntityManagerFactory
		emf = Persistence.createEntityManagerFactory("jpa-mssql");
	}
	@Override
	public List<PhanCong> getAlltbPhanCong() {
		EntityManager em = emf.createEntityManager(); 
		
		try {
			// Sử dụng JPQL để truy vấn danh sách nhân viên
			TypedQuery<PhanCong> query = em.createQuery("SELECT pc FROM PhanCong pc", PhanCong.class);

			List<PhanCong> list = query.getResultList(); // Thực hiện truy vấn và lấy kết quả

			return list;
		} catch (Exception e) {
			e.printStackTrace();
			em.close(); // Đóng EntityManager sau khi sử dụng
		}

		return null; // Trả về giá trị mặc định nếu có lỗi
	}

	@Override
	public boolean create(PhanCong pc) {
		EntityManager em = emf.createEntityManager(); // Mở EntityManager
		EntityTransaction tx = em.getTransaction();
		try {
			tx.begin();

			em.persist(pc);

			tx.commit();

			return true;
		} catch (Exception e) {
			if (tx != null && tx.isActive()) {
				tx.rollback();
			}
			e.printStackTrace();
		} finally {
			em.close(); // Đóng EntityManager sau khi sử dụng
		}

		return false;
	}

	@Override
	public boolean deletePC(String maPC) {
		EntityManager em = emf.createEntityManager(); // Mở EntityManager
		EntityTransaction tx = em.getTransaction();
		try {
			tx.begin();

			PhanCong congNV = em.find(PhanCong.class, maPC);
			em.remove(congNV);

			tx.commit();

			return true;
		} catch (Exception e) {
			if (tx != null && tx.isActive()) {
				tx.rollback();
			}
			e.printStackTrace();
		} finally {
			em.close(); // Đóng EntityManager sau khi sử dụng
		}
		return false;
	}

	@Override
	public boolean update(PhanCong pc) {
		EntityManager em = emf.createEntityManager(); // Mở EntityManager
		EntityTransaction tx = em.getTransaction();
		try {
			tx.begin();
			PhanCong congNV = em.find(PhanCong.class, pc.getMaPhanCong());
			em.merge(pc);

			tx.commit();

			return true;
		} catch (Exception e) {
			if (tx != null && tx.isActive()) {
				tx.rollback();
			}
			e.printStackTrace();
		} finally {
			em.close(); // Đóng EntityManager sau khi sử dụng
		}

		return false;	}

	@Override
	public int getPCNumber() {
		EntityManager em = emf.createEntityManager(); 
		try {
			// Sử dụng JPQL để truy vấn mã nhân viên lớn nhất
			TypedQuery<Integer> query = em.createQuery(
					"SELECT MAX(CAST(SUBSTRING(nv.maPhanCong, 3, LENGTH(nv.maPhanCong) - 2) AS int)) FROM PhanCong nv",
					Integer.class);

			Integer maxEmployeeNumber = query.getSingleResult(); // Thực hiện truy vấn và lấy kết quả

			// Nếu không có kết quả, trả về 0
			if (maxEmployeeNumber == null) {
				return 0;
			}

			return maxEmployeeNumber;
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			em.close(); // Đóng EntityManager sau khi sử dụng
		}

		return 0;
	}

	@Override
	public String getTenCongNhan(String maCongNhan) {
		EntityManager em = emf.createEntityManager(); // Mở EntityManager
		EntityTransaction tx = em.getTransaction();
	
		
		CongNhan pc =em.find(CongNhan.class, maCongNhan);
		String ten =pc.getHoTen();
		return ten;
		
	}

	@Override
	public String getTenCongDoan(String tenCongDoan) {
		EntityManager em = emf.createEntityManager(); // Mở EntityManager
		EntityTransaction tx = em.getTransaction();
	
		
		CongDoan pc =em.find(CongDoan.class, tenCongDoan);
		String ten =pc.getTenCongDoan();
		return ten;
	}

	@Override
	public List<String> getAllMaCongNhan() {
		EntityManager em = emf.createEntityManager(); // Mở EntityManager
		try {
			// Sử dụng JPQL để truy vấn danh sách nhân viên
			TypedQuery<String> query = (TypedQuery<String>) em.createQuery("SELECT pc.maCongNhan FROM CongNhan pc");

			List<String> list = query.getResultList(); // Thực hiện truy vấn và lấy kết quả

			return list;
		} catch (Exception e) {
			e.printStackTrace();
			em.close(); // Đóng EntityManager sau khi sử dụng
		}

		return null; // Trả về giá trị mặc định nếu có lỗi
		
	}

	@Override
	public List<String> getAllMaCongDoan() {
		EntityManager em = emf.createEntityManager(); // Mở EntityManager
		try {
			// Sử dụng JPQL để truy vấn danh sách nhân viên
			TypedQuery<String> query = (TypedQuery<String>) em.createQuery("SELECT pc.maCongDoan FROM CongDoan pc");

			List<String> list = query.getResultList(); // Thực hiện truy vấn và lấy kết quả

			return list;
		} catch (Exception e) {
			e.printStackTrace();
			em.close(); // Đóng EntityManager sau khi sử dụng
		}

		return null; // Trả về giá trị mặc định nếu có lỗi
	}

	@Override
	public Long getSoLuongDaPhanCong(String maCongDoan) {
		EntityManager em = emf.createEntityManager(); 
		String jpql = "SELECT SUM(pc.soLuongSanPhamCanLam) FROM PhanCong pc WHERE pc.CongDoan.maCongDoan = :maCongDoan";
        TypedQuery<Long> query = em.createQuery(jpql, Long.class);
        query.setParameter("maCongDoan", maCongDoan);
        Long result = query.getSingleResult();
        return result != null ? result : 0L;
	}

	@Override
	public Long getTongSoLuongSanPhamDaPhanCong(String maCongNhan, String maCongDoan) {
		EntityManager em = emf.createEntityManager(); 
		String jpql = "SELECT SUM(pc.soLuongSanPhamCanLam) FROM PhanCong pc WHERE pc.maCongNhan.maCongNhan = :maCongNhan AND pc.CongDoan.maCongDoan = :maCongDoan";
        TypedQuery<Long> query = em.createQuery(jpql, Long.class);
        query.setParameter("maCongNhan", maCongNhan);
        query.setParameter("maCongDoan", maCongDoan);
        Long result = query.getSingleResult();
        return result != null ? result : 0L;
		
	}


 
	@Override
	public PhanCong getMaCongDoanDaLamTheoMaCongNhan(String maCN) {
		EntityManager em = emf.createEntityManager(); 
		return em.createQuery("select c from PhanCong c where c.CongDoan.maCongDoan = :title", PhanCong.class)
				.setParameter("title", maCN)
//				.getSingleResult();
				.getResultList()
				.stream()
				.findFirst()
				.orElse(null);

	
	}
public static void main(String[] args) {
	PhanConglmpl p =new PhanConglmpl();
	CongNhan cn = new CongNhan("CN02");
//	CongDoan cd = new CongDoan("CD02");
//	PhanCong pc = new PhanCong("a", cn, "k", cd, "s", 0);
	

//	Query<PhanCong> query = session.createQuery("SELECT pc FROM PhanCong pc WHERE pc.maCongNhan = :congNhan", PhanCong.class);
//	query.setParameter("congNhan", congNhan);
//	List<PhanCong> resultList = query.getResultList();
	System.out.println(p.getMaCongDoanDaLamTheoMaCongNhan("CD01"));
	
//	List<String> ds =p.getAllMaCongNhan();
//	for (String string : ds) {
//		System.out.println(string);
//	}
	
}
}
